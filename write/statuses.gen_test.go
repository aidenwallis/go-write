// Generated by writegen. DO NOT EDIT.
package write_test

import (
	"net/http"
	"net/http/httptest"
	"testing"

	"github.com/aidenwallis/go-write/write"
)

func TestCodegen(t *testing.T) {
	t.Parallel()

	handle := func(t *testing.T, status int, factory func(http.ResponseWriter) *write.Writer) {
		w := httptest.NewRecorder()
		req, _ := http.NewRequest(http.MethodGet, "http://test/library", nil)
		http.HandlerFunc(func(w http.ResponseWriter, _ *http.Request) {
			assertNoError(t, factory(w).Empty())
		}).ServeHTTP(w, req)
		assertValues(t, status, w.Result().StatusCode)
	}

	
	t.Run("Accepted", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusAccepted, write.Accepted)
	})
	
	t.Run("AlreadyReported", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusAlreadyReported, write.AlreadyReported)
	})
	
	t.Run("BadGateway", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusBadGateway, write.BadGateway)
	})
	
	t.Run("BadRequest", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusBadRequest, write.BadRequest)
	})
	
	t.Run("Conflict", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusConflict, write.Conflict)
	})
	
	t.Run("Continue", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusContinue, write.Continue)
	})
	
	t.Run("Created", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusCreated, write.Created)
	})
	
	t.Run("EarlyHints", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusEarlyHints, write.EarlyHints)
	})
	
	t.Run("ExpectationFailed", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusExpectationFailed, write.ExpectationFailed)
	})
	
	t.Run("FailedDependency", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusFailedDependency, write.FailedDependency)
	})
	
	t.Run("Forbidden", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusForbidden, write.Forbidden)
	})
	
	t.Run("Found", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusFound, write.Found)
	})
	
	t.Run("GatewayTimeout", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusGatewayTimeout, write.GatewayTimeout)
	})
	
	t.Run("Gone", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusGone, write.Gone)
	})
	
	t.Run("HTTPVersionNotSupported", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusHTTPVersionNotSupported, write.HTTPVersionNotSupported)
	})
	
	t.Run("IMUsed", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusIMUsed, write.IMUsed)
	})
	
	t.Run("InsufficientStorage", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusInsufficientStorage, write.InsufficientStorage)
	})
	
	t.Run("InternalServerError", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusInternalServerError, write.InternalServerError)
	})
	
	t.Run("LengthRequired", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusLengthRequired, write.LengthRequired)
	})
	
	t.Run("Locked", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusLocked, write.Locked)
	})
	
	t.Run("LoopDetected", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusLoopDetected, write.LoopDetected)
	})
	
	t.Run("MethodNotAllowed", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusMethodNotAllowed, write.MethodNotAllowed)
	})
	
	t.Run("MisdirectedRequest", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusMisdirectedRequest, write.MisdirectedRequest)
	})
	
	t.Run("MovedPermanently", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusMovedPermanently, write.MovedPermanently)
	})
	
	t.Run("MultiStatus", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusMultiStatus, write.MultiStatus)
	})
	
	t.Run("MultipleChoices", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusMultipleChoices, write.MultipleChoices)
	})
	
	t.Run("NetworkAuthenticationRequired", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusNetworkAuthenticationRequired, write.NetworkAuthenticationRequired)
	})
	
	t.Run("NoContent", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusNoContent, write.NoContent)
	})
	
	t.Run("NonAuthoritativeInfo", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusNonAuthoritativeInfo, write.NonAuthoritativeInfo)
	})
	
	t.Run("NotAcceptable", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusNotAcceptable, write.NotAcceptable)
	})
	
	t.Run("NotExtended", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusNotExtended, write.NotExtended)
	})
	
	t.Run("NotFound", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusNotFound, write.NotFound)
	})
	
	t.Run("NotImplemented", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusNotImplemented, write.NotImplemented)
	})
	
	t.Run("NotModified", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusNotModified, write.NotModified)
	})
	
	t.Run("OK", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusOK, write.OK)
	})
	
	t.Run("PartialContent", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusPartialContent, write.PartialContent)
	})
	
	t.Run("PaymentRequired", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusPaymentRequired, write.PaymentRequired)
	})
	
	t.Run("PermanentRedirect", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusPermanentRedirect, write.PermanentRedirect)
	})
	
	t.Run("PreconditionFailed", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusPreconditionFailed, write.PreconditionFailed)
	})
	
	t.Run("PreconditionRequired", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusPreconditionRequired, write.PreconditionRequired)
	})
	
	t.Run("Processing", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusProcessing, write.Processing)
	})
	
	t.Run("ProxyAuthRequired", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusProxyAuthRequired, write.ProxyAuthRequired)
	})
	
	t.Run("RequestEntityTooLarge", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusRequestEntityTooLarge, write.RequestEntityTooLarge)
	})
	
	t.Run("RequestHeaderFieldsTooLarge", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusRequestHeaderFieldsTooLarge, write.RequestHeaderFieldsTooLarge)
	})
	
	t.Run("RequestTimeout", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusRequestTimeout, write.RequestTimeout)
	})
	
	t.Run("RequestURITooLong", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusRequestURITooLong, write.RequestURITooLong)
	})
	
	t.Run("RequestedRangeNotSatisfiable", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusRequestedRangeNotSatisfiable, write.RequestedRangeNotSatisfiable)
	})
	
	t.Run("ResetContent", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusResetContent, write.ResetContent)
	})
	
	t.Run("SeeOther", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusSeeOther, write.SeeOther)
	})
	
	t.Run("ServiceUnavailable", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusServiceUnavailable, write.ServiceUnavailable)
	})
	
	t.Run("SwitchingProtocols", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusSwitchingProtocols, write.SwitchingProtocols)
	})
	
	t.Run("Teapot", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusTeapot, write.Teapot)
	})
	
	t.Run("TemporaryRedirect", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusTemporaryRedirect, write.TemporaryRedirect)
	})
	
	t.Run("TooEarly", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusTooEarly, write.TooEarly)
	})
	
	t.Run("TooManyRequests", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusTooManyRequests, write.TooManyRequests)
	})
	
	t.Run("Unauthorized", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusUnauthorized, write.Unauthorized)
	})
	
	t.Run("UnavailableForLegalReasons", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusUnavailableForLegalReasons, write.UnavailableForLegalReasons)
	})
	
	t.Run("UnprocessableEntity", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusUnprocessableEntity, write.UnprocessableEntity)
	})
	
	t.Run("UnsupportedMediaType", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusUnsupportedMediaType, write.UnsupportedMediaType)
	})
	
	t.Run("UpgradeRequired", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusUpgradeRequired, write.UpgradeRequired)
	})
	
	t.Run("UseProxy", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusUseProxy, write.UseProxy)
	})
	
	t.Run("VariantAlsoNegotiates", func(t *testing.T) {
		t.Parallel()
		handle(t, http.StatusVariantAlsoNegotiates, write.VariantAlsoNegotiates)
	})
	
}
