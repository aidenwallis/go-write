package main

//go:generate go run main.go

import (
	"errors"
	"log"
	"os"
	"path/filepath"
	"runtime"
	"text/template"
)

// modified from https://go.dev/src/net/http/status.go
var values = map[string]int{
	"Continue":           100,
	"SwitchingProtocols": 101,
	"Processing":         102,
	"EarlyHints":         103,

	"OK":                   200,
	"Created":              201,
	"Accepted":             202,
	"NonAuthoritativeInfo": 203,
	"NoContent":            204,
	"ResetContent":         205,
	"PartialContent":       206,
	"MultiStatus":          207,
	"AlreadyReported":      208,
	"IMUsed":               226,

	"MultipleChoices":  300,
	"MovedPermanently": 301,
	"Found":            302,
	"SeeOther":         303,
	"NotModified":      304,
	"UseProxy":         305,

	"TemporaryRedirect": 307,
	"PermanentRedirect": 308,

	"BadRequest":                   400,
	"Unauthorized":                 401,
	"PaymentRequired":              402,
	"Forbidden":                    403,
	"NotFound":                     404,
	"MethodNotAllowed":             405,
	"NotAcceptable":                406,
	"ProxyAuthRequired":            407,
	"RequestTimeout":               408,
	"Conflict":                     409,
	"Gone":                         410,
	"LengthRequired":               411,
	"PreconditionFailed":           412,
	"RequestEntityTooLarge":        413,
	"RequestURITooLong":            414,
	"UnsupportedMediaType":         415,
	"RequestedRangeNotSatisfiable": 416,
	"ExpectationFailed":            417,
	"Teapot":                       418,
	"MisdirectedRequest":           421,
	"UnprocessableEntity":          422,
	"Locked":                       423,
	"FailedDependency":             424,
	"TooEarly":                     425,
	"UpgradeRequired":              426,
	"PreconditionRequired":         428,
	"TooManyRequests":              429,
	"RequestHeaderFieldsTooLarge":  431,
	"UnavailableForLegalReasons":   451,

	"InternalServerError":           500,
	"NotImplemented":                501,
	"BadGateway":                    502,
	"ServiceUnavailable":            503,
	"GatewayTimeout":                504,
	"HTTPVersionNotSupported":       505,
	"VariantAlsoNegotiates":         506,
	"InsufficientStorage":           507,
	"LoopDetected":                  508,
	"NotExtended":                   510,
	"NetworkAuthenticationRequired": 511,
}

func main() {
	err := createFromTemplate("main", "../../write/statuses.gen.go", `// Generated by writegen. DO NOT EDIT.
package write

import "net/http"
{{ range $name, $status := . }}
// {{ $name }} creates a new writer of status code {{ $status }}
func {{ $name }}(w http.ResponseWriter) *Writer {
	return New(w, http.Status{{ $name }})
}
{{ end }}`)
	if err != nil {
		log.Fatalln("Failed to generate main template: " + err.Error())
	}

	err = createFromTemplate("test", "../../write/statuses.gen_test.go", `// Generated by writegen. DO NOT EDIT.
package write_test

import (
	"net/http"
	"net/http/httptest"
	"testing"

	"github.com/aidenwallis/go-write/write"
)

func TestCodegen(t *testing.T) {
	t.Parallel()

	handle := func(t *testing.T, status int, factory func(http.ResponseWriter) *write.Writer) {
		w := httptest.NewRecorder()
		req, _ := http.NewRequest(http.MethodGet, "http://test/library", nil)
		http.HandlerFunc(func(w http.ResponseWriter, _ *http.Request) {
			assertNoError(t, factory(w).Empty())
		}).ServeHTTP(w, req)
		assertValues(t, status, w.Result().StatusCode)
	}

	{{ range $name, $status := . }}
	t.Run("{{ $name }}", func(t *testing.T) {
		t.Parallel()
		handle(t, http.Status{{ $name }}, write.{{ $name }})
	})
	{{ end }}
}
`)
	if err != nil {
		log.Fatalln("Failed to generate test template: " + err.Error())
	}
}

func createFromTemplate(name, filePath, templateStr string) error {
	_, filename, _, ok := runtime.Caller(0)
	if !ok {
		return errors.New("unable to get the current filename")
	}
	dirname := filepath.Dir(filename)

	f, err := os.Create(dirname + "/" + filePath)
	if err != nil {
		return err
	}
	defer f.Close()
	return template.Must(template.New(name).Parse(templateStr)).Execute(f, values)
}
